// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using scrapper.Models;

#nullable disable

namespace scrapper.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("beckend.Models.ViewsModel.JobOpening", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("jobDescription")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("JobOpening");
                });

            modelBuilder.Entity("beckend.Models.ViewsModel.OpenJobs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProjectViewId")
                        .HasColumnType("integer");

                    b.Property<int?>("jobOpeningId")
                        .HasColumnType("integer");

                    b.Property<string>("jobSourse")
                        .HasColumnType("text");

                    b.Property<string>("location")
                        .HasColumnType("text");

                    b.Property<DateTime?>("publishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("requirements")
                        .HasColumnType("text");

                    b.Property<string>("responsibilities")
                        .HasColumnType("text");

                    b.Property<int?>("roleId")
                        .HasColumnType("integer");

                    b.Property<string>("salary")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectViewId");

                    b.HasIndex("jobOpeningId");

                    b.HasIndex("roleId");

                    b.ToTable("OpenJobs");
                });

            modelBuilder.Entity("beckend.Models.ViewsModel.ProjectView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ProjectAvatar")
                        .HasColumnType("text");

                    b.Property<string>("ProjectCover")
                        .HasColumnType("text");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("ProjectSourse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectWebsite")
                        .HasColumnType("text");

                    b.Property<string>("ProjectX")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("projectView");
                });

            modelBuilder.Entity("beckend.Models.ViewsModel.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("beckend.Models.ViewsModel.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("OpenJobsId")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenJobsId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("beckend.Models.ViewsModel.WorkFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("OpenJobsId")
                        .HasColumnType("integer");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OpenJobsId");

                    b.ToTable("WorkFormat");
                });

            modelBuilder.Entity("beckend.Models.ViewsModel.OpenJobs", b =>
                {
                    b.HasOne("beckend.Models.ViewsModel.ProjectView", null)
                        .WithMany("ListOpenJobsInProject")
                        .HasForeignKey("ProjectViewId");

                    b.HasOne("beckend.Models.ViewsModel.JobOpening", "jobOpening")
                        .WithMany()
                        .HasForeignKey("jobOpeningId");

                    b.HasOne("beckend.Models.ViewsModel.Role", "role")
                        .WithMany()
                        .HasForeignKey("roleId");

                    b.Navigation("jobOpening");

                    b.Navigation("role");
                });

            modelBuilder.Entity("beckend.Models.ViewsModel.Skill", b =>
                {
                    b.HasOne("beckend.Models.ViewsModel.OpenJobs", null)
                        .WithMany("skills")
                        .HasForeignKey("OpenJobsId");
                });

            modelBuilder.Entity("beckend.Models.ViewsModel.WorkFormat", b =>
                {
                    b.HasOne("beckend.Models.ViewsModel.OpenJobs", null)
                        .WithMany("workFormats")
                        .HasForeignKey("OpenJobsId");
                });

            modelBuilder.Entity("beckend.Models.ViewsModel.OpenJobs", b =>
                {
                    b.Navigation("skills");

                    b.Navigation("workFormats");
                });

            modelBuilder.Entity("beckend.Models.ViewsModel.ProjectView", b =>
                {
                    b.Navigation("ListOpenJobsInProject");
                });
#pragma warning restore 612, 618
        }
    }
}
